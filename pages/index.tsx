/* eslint-disable @next/next/no-img-element */
import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';
import React, { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import Head from 'next/head';
import CustomLink from '../components/shared/CustomLink';
const ffmpeg = createFFmpeg();

export default function Home() {
    const [ready, setReady] = useState(false);
    const [video, setVideo]: any = useState();
    const [gif, setGif]: any = useState();

    const load = async () => {
        await ffmpeg.load();
        setReady(true);
    };

    useEffect(() => {
        load();
    }, []);

    const convertToGif = async () => {
        // Write the file to memory
        ffmpeg.FS('writeFile', 'test.mp4', await fetchFile(video));

        // Run the FFMpeg command
        await ffmpeg.run(
            '-i',
            'test.mp4',
            '-t',
            '2.5',
            '-ss',
            '2.0',
            '-f',
            'gif',
            'out.gif'
        );

        // Read the result
        const data = ffmpeg.FS('readFile', 'out.gif');

        // Create a URL
        const url: any = URL.createObjectURL(
            new Blob([data.buffer], { type: 'image/gif' })
        );
        setGif(url);
    };

    const setEverythingNull = () => {
        setVideo();
        setGif();
    };
    return ready ? (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h1 className={styles.title}>
                    GIF<CustomLink href="/">Maker</CustomLink>
                </h1>
                <p className={styles.description}>
                    Convert videos to gifs, while remaining <b>offline.</b>
                </p>

                <div className="upload-block">
                    {video ? (
                        <>
                            {gif ? (
                                <>
                                    <img
                                        src={gif}
                                        width="100%"
                                        alt="converted-image"
                                    />

                                    <a href={gif}>
                                        <div className="upload-button green">
                                            Download GIF
                                        </div>
                                    </a>

                                    <div
                                        className="upload-button blue"
                                        onClick={setEverythingNull}
                                    >
                                        Convert another video
                                    </div>
                                </>
                            ) : (
                                <>
                                    <video
                                        controls
                                        width="100%"
                                        src={URL.createObjectURL(video)}
                                    ></video>
                                    <div
                                        className="upload-button blue"
                                        onClick={convertToGif}
                                    >
                                        Convert to GIF
                                    </div>
                                </>
                            )}
                        </>
                    ) : (
                        <>
                            <p className="text-description">
                                Upload a MP4, or MOV.
                            </p>{' '}
                            <div className="upload-button">Choose File</div>
                            <input
                                type="file"
                                onChange={(e) =>
                                    setVideo(e.target.files?.item(0))
                                }
                            />
                        </>
                    )}
                </div>
            </main>
        </div>
    ) : (
        <div className={styles.container}>
            <Head>
                <title>GIF Maker</title>
                <meta
                    name="description"
                    content="Convert videos to gifs, while remaining offline"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h1 className={styles.title}>
                    GIF<CustomLink href="/">Maker</CustomLink>
                </h1>
                <p className={styles.description}>
                    Convert videos to gifs, while remaining <b>offline.</b>
                </p>
                <div className="lds-dual-ring"></div>
            </main>
        </div>
    );
}
